library(magrittr)
library(tidyverse)
setwd("D:\\Personal_profiles\\bioinformatics\\R\\binings\\platform_data")
###宏基因组数据######################################################################
S.taxName.count <- read.delim("S.taxName.count.tsv", 
                              row.names=1, comment.char="#")
library(stringr)
split_bin <- str_split(S.taxName.count$taxonomy,";")
Kingdom <- sapply(split_bin,"[",1)
Phylum <- sapply(split_bin,"[",2)
Class <- sapply(split_bin,"[",3)
Order <- sapply(split_bin,"[",4)
Family <- sapply(split_bin,"[",5)
Genus <- sapply(split_bin,"[",6)
Species <- sapply(split_bin,"[",7)
bin_taxonomy <- data.frame(Kingdom,Phylum,Class,Order,Family,Genus,Species)
#存在一行由于比对到人的分类信息导致产生缺失值
bin_taxonomy <- bin_taxonomy[-which(is.na(bin_taxonomy$Phylum)),]#删除NA值
sum(bin_taxonomy$Kingdom == "k__Archaea")
bin_taxonomy$Kingdom
# which(!duplicated(bin_taxonomy$Kingdom))
unique(bin_taxonomy$Kingdom)
tax_bac <- bin_taxonomy[bin_taxonomy$Kingdom == "k__Bacteria",]
tax_fun <- bin_taxonomy[bin_taxonomy$Kingdom == "k__Eukaryota",]
tax_arc <- bin_taxonomy[bin_taxonomy$Kingdom == "k__Archaea",]

df1 <- S.taxName.count[,-length(S.taxName.count)]
df2 <- df1[-which(is.na(df1$SQ_CS_1)),]#删除NA值
df_com <- cbind(df2,bin_taxonomy)
df_meta_bac <- df_com[df_com$Kingdom == "k__Bacteria",] %>% select(c(1:30,32))  
df_meta_fun <- df_com[df_com$Kingdom == "k__Eukaryota",]%>% select(c(1:30,32)) 
df_meta_arc <- df_com[df_com$Kingdom == "k__Archaea",]%>% select(c(1:30,32))
##细菌
df3 <- df_meta_bac[,-length(df_meta_bac)]
colSums(df3)
library(vegan)
##数据抽平
# df4 <- as.data.frame(t(rrarefy(t(df3), min(colSums(df3)))))
# write.table(df4,"meta_rarefy_bac.txt",sep = "\t",col.names = T,row.names = T)
df4 <- read.table("meta_rarefy_bac.txt",sep = "\t",header = T,row.names = 1)
colSums(df4)
####phylum水平
df5 <- cbind(df4,Phylum = tax_bac$Phylum)
df6 <- aggregate(df5[,-length(df5)],by = list(df5$Phylum),sum)
df7 <- column_to_rownames(df6,var = "Group.1")

df8 <- df7 %>% as_tibble() %>% mutate(sum = rowSums(.), 
                                      persent = sum / sum(sum) * 100, sum = NULL) %>% 
  rbind(filter(., persent < 0.1) %>% colSums()) %>% 
  mutate(Description = c(rownames(df7), "others"))

df9 <- filter(df8[1:(nrow(df8) - 1),], persent > 0.1) %>%
  rbind(df8[nrow(df8),]) %>%
  dplyr::select(ncol(.), 1:(ncol(.) - 2)) %>%
  set_rownames(seq_len(nrow(.)))
colnames(df9) <- gsub("Z","D",colnames(df9))#df9重命名
#取三个重复均值
df <- column_to_rownames(df9,var = "Description")
vector_1 <- NULL
number_1 <- NULL
for (i in 1:nrow(df)){
  for (y in seq(from = 0,by = 1,length = 10)) {
    data_1 <- (apply(df[i,c((3*y+1):(3*(y+1)))], 1, mean))
    vector_1[y+1] <- data_1
  }
  number_1[i] <- list(i = vector_1)
}
number_1
df11 <- as.data.frame(number_1)
# colnames(df9)
rownames(df11) <- c("SQ_CS","SQ_YH","W1","W2","W3","CS","YH","D1","D2","D3")
colnames(df11) <- df9$Description
df11 <- df11[-c(1,2),]
#########2024/7/10 add
df11 <- aggregate(df11,by = list(c("W","W","W","CS","YH","D","D","D")),mean)
rownames(df11) <- df11$Group.1
df11 <- df11[-12]

##compute phylum relative abundance
df_a <- df11[-1]
colSums(df_a)/sum(colSums(df_a))

df12 <- reshape2::melt(df11)
colnames(df12) <- c("to","from","value")
df12 <- df12[c(2,1,3)]
library(circlize)
# install.packages("statnet")
# install.packages("tergm")
# install.packages("glue")
# install.packages("rlang")
library(statnet)
library(RColorBrewer)
display.brewer.all(n=NULL, type="all", select=NULL, exact.n=TRUE, 
                   colorblindFriendly=FALSE)
brewer.pal(4, "Paired")
color=NULL
color[c("W","D","CS","YH")]=brewer.pal(4, "Paired")
color[unique(as.character(df12$from))]=brewer.pal(12, "Set3")[-c(2,9)]

chordDiagram(df12, 
             grid.col =color,#颜色
             annotationTrack = "grid",
             transparency = 0.2,#透明度
             link.lwd = 0.00001,#线条宽度
             link.lty = 1,    # 线路类型
             link.border = 0,#边框颜色
             directional = -1,#表示线条的方向，0代表没有方向，1代表正向，-1代表反向，2代表双向
             diffHeight = mm_h(3),#外圈和中间连线的间隔
             direction.type = c("diffHeight","arrows"), #线条是否带有箭头
             link.arr.type = "big.arrow",#箭头类型
             annotationTrackHeight = c(0.04, 0.1),
             order = c(" p__Proteobacteria"," p__Actinobacteria"," p__Bacteroidetes"," p__Gemmatimonadetes",
                       unique(as.character(df12$from))[-c(2,3,7,9)],c("W","D","CS","YH")))#网格高度

circos.track(track.index = 1, panel.fun = function(x, y) {
  # circos.text(CELL_META$xcenter, CELL_META$ylim[1], CELL_META$sector.index,
  #             facing = "clockwise", niceFacing = T, adj = c(-0.5, 0.5), cex = 0.8)
  circos.axis(h = "top", labels.cex = 0.4,labels.niceFacing = F, labels.pos.adjust =F)
}, bg.border = NA)
legend("right",pch=20,legend=unique(as.character(df12$from)),
       col=color[unique(as.character(df12$from))],
       bty="n",cex=1,pt.cex=3,border="black")
legend("left",pch=20,legend=c("W","D","CS","YH"),
       col=color[c("W","D","CS","YH")],bty="n",
       cex=1,pt.cex=3,border="black")
circos.info()


#####折线图####
df14 <- df9[-11,-(2:7)]
df15 <- column_to_rownames(df14,var = "Description")
df16 <- as.data.frame(t(df15))
df16$Accession <- c(rep("W",9),rep("CS",3),rep("YH",3),rep("D",9))
df17 <- reshape2::melt(df16)
df18 <- df17 %>%
  mutate(Accession_trans=case_when(Accession == "W" ~ "1",
                                   Accession == "D" ~ "2",
                                   Accession == "CS" ~ "3",
                                   Accession == "YH" ~ "4",
                                   TRUE ~ NA_character_))
df18$Accession_trans <- as.numeric(df18$Accession_trans)


d <- data.frame()
f <- data.frame()
for (i in as.character(unique(df18$variable))) {
  a <- df18[df18$variable == i,] 
  b <- with(a,kruskal(value,Accession, group = T, p.adj = "fdr"))
  b$groups$Accession <- rownames(b$groups)
  d <- rbind(d,b$groups)
  e <- b$means[match(rownames(b$groups),rownames(b$means)),][c(1,3)]
  e$Accession <- rownames(e)
  f <- rbind(f,e)
}

rownames(d) <- NULL
rownames(f) <- NULL
f <- data.frame(f,variable = rep(as.character(unique(df18$variable)),each = 4))
f <- data.frame(f,d["groups"])
f <- f %>%
  mutate(Accession_trans=case_when(Accession == "W" ~ "1",
                                   Accession == "D" ~ "2",
                                   Accession == "CS" ~ "3",
                                   Accession == "YH" ~ "4",
                                   TRUE ~ NA_character_))
f$Accession_trans <- as.numeric(f$Accession_trans)


p1 <- df18 %>%
  ggplot() +                            
  stat_summary(aes(x = Accession_trans,y = value,
                   group = variable,color = variable),
               fun.y="mean",geom="point",size=1.5) +        
  stat_summary(aes(x = Accession_trans,y = value,
                   group = variable,color = variable),
               fun.y="mean",geom="line") +  
  stat_summary(aes(x = Accession_trans,y = value,
                   group = variable,color = variable),
               fun.data = "mean_se",geom = "errorbar",width=0.05)+
  geom_text(data = f,aes(x = Accession_trans,y = value,
                         label = groups),color = "black",
            check_overlap = T,size = 5)+
  theme_bw()+
  theme(panel.grid.major=element_blank(),
        panel.grid.minor=element_blank(),
        panel.background = element_blank(),
        legend.key=element_blank(),
        axis.title.x = element_blank())+
  scale_color_manual(values = brewer.pal(10, "Paired"))+
  guides(color = guide_legend(title = "Phylum"))+
  ylab("Abundance")
#截断一次
library(ggbreak)
p2 <- p1+scale_y_break(c(450000,3500000),#截断位置及范围
                     space = 0.2,#间距大小
                     scales = 0.4)#上下显示比例，大于1上面比例大，小于1下面比例大
p2

ggsave("Core_phylum_bac.pdf",height = 10,width = 12)


###############真菌###
###真菌门水平
df3 <- df_meta_fun[,-length(df_meta_fun)]
colSums(df3)
library(vegan)
##数据抽平
df4 <- as.data.frame(t(rrarefy(t(df3), min(colSums(df3)))))
# write.table(df4,"meta_rarefy_bac.txt",sep = "\t",col.names = T,row.names = T)
colSums(df4)
##数据整合
df5 <- cbind(df4,Phylum = tax_fun$Phylum)
##phylum水平
df6 <- aggregate(df5[,-length(df5)],by = list(df5$Phylum),sum)
df7 <- column_to_rownames(df6,var = "Group.1")

df8 <- df7 %>% as_tibble() %>% mutate(sum = rowSums(.), 
                                      persent = sum / sum(sum) * 100, sum = NULL) %>% 
  rbind(filter(., persent < 0.01) %>% colSums()) %>% 
  mutate(Description = c(rownames(df7), "others"))

df9 <- filter(df8[1:(nrow(df8) - 1),], persent > 0.01) %>%
  rbind(df8[nrow(df8),]) %>%
  dplyr::select(ncol(.), 1:(ncol(.) - 2)) %>%
  set_rownames(seq_len(nrow(.)))
colnames(df9) <- gsub("Z","D",colnames(df9))#df9重命名
#取三个重复均值
df <- column_to_rownames(df9,var = "Description")
vector_1 <- NULL
number_1 <- NULL
for (i in 1:nrow(df)){
  for (y in seq(from = 0,by = 1,length = 10)) {
    data_1 <- (apply(df[i,c((3*y+1):(3*(y+1)))], 1, mean))
    vector_1[y+1] <- data_1
  }
  number_1[i] <- list(i = vector_1)
}
number_1
df11 <- as.data.frame(number_1)
rownames(df11) <- c("SQ_CS","SQ_YH","W1","W2","W3","CS","YH","D1","D2","D3")
colnames(df11) <- df9$Description
df11 <- df11[-c(1,2),]
#########2024/7/10 add
df11 <- aggregate(df11,by = list(c("W","W","W","CS","YH","D","D","D")),mean)
rownames(df11) <- df11$Group.1
df11 <- df11[-5]

##compute phylum relative abundance
df_a <- df11[-1]
colSums(df_a)/sum(colSums(df_a))

df12 <- reshape2::melt(df11)
colnames(df12) <- c("to","from","value")
df12 <- df12[c(2,1,3)]
library(circlize)
# install.packages("statnet")
# install.packages("tergm")
# install.packages("glue")
# install.packages("rlang")
library(statnet)
library(RColorBrewer)
display.brewer.all(n=NULL, type="all", select=NULL, exact.n=TRUE, 
                   colorblindFriendly=FALSE)
brewer.pal(4, "Paired")
color=NULL
color[c("W","D","CS","YH")]=brewer.pal(4, "Paired")
color[unique(as.character(df12$from))]=brewer.pal(4, "Set3")[-2]

chordDiagram(df12, 
             grid.col =color,#颜色
             annotationTrack = "grid",
             transparency = 0.2,#透明度
             link.lwd = 0.00001,#线条宽度
             link.lty = 1,    # 线路类型
             link.border = 0,#边框颜色
             directional = -1,#表示线条的方向，0代表没有方向，1代表正向，-1代表反向，2代表双向
             diffHeight = mm_h(3),#外圈和中间连线的间隔
             direction.type = c("diffHeight","arrows"), #线条是否带有箭头
             link.arr.type = "big.arrow",#箭头类型
             annotationTrackHeight = c(0.04, 0.1),
             order = c(unique(as.character(df12$from)),c("W","D","CS","YH")))#网格高度

circos.track(track.index = 1, panel.fun = function(x, y) {
  # circos.text(CELL_META$xcenter, CELL_META$ylim[1], CELL_META$sector.index,
  #             facing = "clockwise", niceFacing = T, adj = c(-0.5, 0.5), cex = 0.8)
  circos.axis(h = "top", labels.cex = 0.4,labels.niceFacing = F, labels.pos.adjust =F)
}, bg.border = NA)
legend("right",pch=20,legend=unique(as.character(df12$from)),
       col=color[unique(as.character(df12$from))],
       bty="n",cex=1,pt.cex=3,border="black")
legend("left",pch=20,legend=c("W","D","CS","YH"),
       col=color[c("W","D","CS","YH")],bty="n",
       cex=1,pt.cex=3,border="black")
circos.info()

#####折线图####
df14 <- df9[-4,-(2:7)]
df15 <- column_to_rownames(df14,var = "Description")
df16 <- as.data.frame(t(df15))
df16$Accession <- c(rep("W",9),rep("CS",3),rep("YH",3),rep("D",9))
df17 <- reshape2::melt(df16)
df18 <- df17 %>%
  mutate(Accession_trans=case_when(Accession == "W" ~ "1",
                                   Accession == "D" ~ "2",
                                   Accession == "CS" ~ "3",
                                   Accession == "YH" ~ "4",
                                   TRUE ~ NA_character_))
df18$Accession_trans <- as.numeric(df18$Accession_trans)


d <- data.frame()
f <- data.frame()
for (i in as.character(unique(df18$variable))) {
  a <- df18[df18$variable == i,] 
  b <- with(a,kruskal(value,Accession, group = T, p.adj = "fdr"))
  b$groups$Accession <- rownames(b$groups)
  d <- rbind(d,b$groups)
  e <- b$means[match(rownames(b$groups),rownames(b$means)),][c(1,3)]
  e$Accession <- rownames(e)
  f <- rbind(f,e)
}

rownames(d) <- NULL
rownames(f) <- NULL
f <- data.frame(f,variable = rep(as.character(unique(df18$variable)),each = 4))
f <- data.frame(f,d["groups"])
f <- f %>%
  mutate(Accession_trans=case_when(Accession == "W" ~ "1",
                                   Accession == "D" ~ "2",
                                   Accession == "CS" ~ "3",
                                   Accession == "YH" ~ "4",
                                   TRUE ~ NA_character_))
f$Accession_trans <- as.numeric(f$Accession_trans)


p1 <- df18 %>%
  ggplot() +                            
  stat_summary(aes(x = Accession_trans,y = value,
                   group = variable,color = variable),
               fun.y="mean",geom="point",size=1.5) +        
  stat_summary(aes(x = Accession_trans,y = value,
                   group = variable,color = variable),
               fun.y="mean",geom="line") +  
  stat_summary(aes(x = Accession_trans,y = value,
                   group = variable,color = variable),
               fun.data = "mean_se",geom = "errorbar",width=0.05)+
  geom_text(data = f,aes(x = Accession_trans,y = value,
                         label = groups),color = "black",
            check_overlap = T,size = 5)+
  theme_bw()+
  theme(panel.grid.major=element_blank(),
        panel.grid.minor=element_blank(),
        panel.background = element_blank(),
        legend.key=element_blank(),
        axis.title.x = element_blank())+
  scale_color_manual(values = brewer.pal(10, "Paired"))+
  guides(color = guide_legend(title = "Phylum"))+
  ylab("Abundance")
#截断一次
library(ggbreak)
p2 <- p1+scale_y_break(c(3100,22500),#截断位置及范围
                       space = 0.2,#间距大小
                       scales = 0.4)+
  scale_y_break(c(50,1500),scales = 1.5,space = 0.2)#上下显示比例，大于1上面比例大，小于1下面比例大
p2

ggsave("Core_phylum_fungi.pdf",height = 10,width = 12)
